/* LexerTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. LexerTokenManager.java */
package fr.uga.pddl4j.parser.lexer;
import fr.uga.pddl4j.parser.Connective;
import fr.uga.pddl4j.parser.DerivedPredicate;
import fr.uga.pddl4j.parser.ErrorManager;
import fr.uga.pddl4j.parser.Parser;
import fr.uga.pddl4j.parser.Exp;
import fr.uga.pddl4j.parser.Domain;
import fr.uga.pddl4j.parser.Problem;
import fr.uga.pddl4j.parser.NamedTypedList;
import fr.uga.pddl4j.parser.Op;
import fr.uga.pddl4j.parser.Method;
import fr.uga.pddl4j.parser.RequireKey;
import fr.uga.pddl4j.parser.Symbol;
import fr.uga.pddl4j.parser.TypedSymbol;
import java.io.FileInputStream;
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

/** Token Manager. */
@SuppressWarnings("unused")public class LexerTokenManager implements LexerConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x120L) != 0L || (active1 & 0x80L) != 0L)
            return 2;
         if ((active0 & 0x430130000L) != 0L || (active1 & 0x19ffffffffc00L) != 0L)
         {
            jjmatchedKind = 114;
            return 8;
         }
         if ((active1 & 0x200000000000L) != 0L)
            return 5;
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active1 & 0x101008000L) != 0L)
            return 8;
         if ((active0 & 0x430130000L) != 0L || (active1 & 0x19ffefeff7c00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 114;
               jjmatchedPos = 1;
            }
            return 8;
         }
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 1;
            }
            return 6;
         }
         return -1;
      case 2:
         if ((active1 & 0x1400050000L) != 0L)
            return 8;
         if ((active0 & 0x430130000L) != 0L || (active1 & 0x19feafffa7c00L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 2;
            return 8;
         }
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 2;
            return 6;
         }
         return -1;
      case 3:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 3;
            return 6;
         }
         if ((active0 & 0x20000000L) != 0L || (active1 & 0x800000000L) != 0L)
            return 8;
         if ((active0 & 0x410130000L) != 0L || (active1 & 0x19fe2fffa7c00L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 3;
            return 8;
         }
         return -1;
      case 4:
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 4;
            }
            return 6;
         }
         if ((active1 & 0x80200020000L) != 0L)
            return 8;
         if ((active0 & 0x410130000L) != 0L || (active1 & 0x197e0fff87c00L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 114;
               jjmatchedPos = 4;
            }
            return 8;
         }
         return -1;
      case 5:
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 5;
            }
            return 6;
         }
         if ((active0 & 0x130000L) != 0L || (active1 & 0x1840008b80400L) != 0L)
            return 8;
         if ((active0 & 0x410000000L) != 0L || (active1 & 0x13e0f7407800L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 114;
               jjmatchedPos = 5;
            }
            return 8;
         }
         return -1;
      case 6:
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 6;
            }
            return 6;
         }
         if ((active0 & 0x400000000L) != 0L || (active1 & 0x100000000000L) != 0L)
            return 8;
         if ((active0 & 0x10000000L) != 0L || (active1 & 0x3e0ff407800L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 114;
               jjmatchedPos = 6;
            }
            return 8;
         }
         return -1;
      case 7:
         if ((active1 & 0x200000000000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 113;
               jjmatchedPos = 7;
            }
            return 6;
         }
         if ((active1 & 0x18006406800L) != 0L)
            return 8;
         if ((active0 & 0x10000000L) != 0L || (active1 & 0x260f9001000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 114;
               jjmatchedPos = 7;
            }
            return 8;
         }
         return -1;
      case 8:
         if ((active0 & 0x10000000L) != 0L || (active1 & 0x260ff001000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 114;
               jjmatchedPos = 8;
            }
            return 8;
         }
         if ((active1 & 0x200000000000L) != 0L)
            return 6;
         return -1;
      case 9:
         if ((active1 & 0x200df000000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 114;
               jjmatchedPos = 9;
            }
            return 8;
         }
         if ((active0 & 0x10000000L) != 0L || (active1 & 0x6020001000L) != 0L)
            return 8;
         return -1;
      case 10:
         if ((active1 & 0x20050000000L) != 0L)
            return 8;
         if ((active1 & 0x8f000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 10;
            return 8;
         }
         return -1;
      case 11:
         if ((active1 & 0x81000000L) != 0L)
            return 8;
         if ((active1 & 0xe000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 11;
            return 8;
         }
         return -1;
      case 12:
         if ((active1 & 0x8000000L) != 0L)
            return 8;
         if ((active1 & 0x6000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 12;
            return 8;
         }
         return -1;
      case 13:
         if ((active1 & 0x2000000L) != 0L)
            return 8;
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 13;
            return 8;
         }
         return -1;
      case 14:
         if ((active1 & 0x4000000L) != 0L)
            return 8;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000000L);
      case 40:
         return jjStopAtPos(0, 13);
      case 41:
         return jjStopAtPos(0, 14);
      case 42:
         return jjStopAtPos(0, 70);
      case 43:
         return jjStopAtPos(0, 72);
      case 45:
         return jjStopAtPos(0, 73);
      case 47:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x120L, 0x0L);
      case 58:
         return jjMoveStringLiteralDfa1_0(0xfffffffbcfec0000L, 0x1L);
      case 59:
         return jjStopAtPos(0, 6);
      case 60:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 61:
         return jjStopAtPos(0, 69);
      case 62:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 63:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L);
      case 64:
         return jjStopAtPos(0, 15);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x81109210400L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x140000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x30000L, 0x4000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x400100000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf0000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000022000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000040000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000800008000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x410000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x206401800L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x800000L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         break;
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 61:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x84000001000000L, active1, 0x8000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x3002000100200000L, active1, 0x1800L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x4300100ac0000000L, active1, 0x200000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x600008010000L, active1, 0x140000004001L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000800000L, active1, 0x80000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x40004000000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000020000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000100000L, active1, 0x10000800000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1008200000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000000L, active1, 0x20000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x10080000000000L, active1, 0x400012000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x20001000020000L, active1, 0x60f64c0000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000006400000L, active1, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 79, 8);
         return jjMoveStringLiteralDfa2_0(active0, 0x410040000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0x20000000400L);
      case 84:
      case 116:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 110);
         return jjMoveStringLiteralDfa2_0(active0, 0x400040000080000L, active1, 0x201000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0x800000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20001000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0x200001800L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x20001000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000001000000L, active1, 0x6000L);
      case 68:
      case 100:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 80, 8);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 98, 8);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200098230040000L, active1, 0x800000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8010000L, active1, 0x40000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x400100000000000L, active1, 0x100000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000L);
      case 76:
      case 108:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 100, 8);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0xf0000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0x800006400000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x802000000000L, active1, 0x10000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x3042004d00200000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000004400000L, active1, 0x80000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400L);
      case 84:
      case 116:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 82, 8);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000020000100000L, active1, 0x186000800000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x41110000c0800000L, active1, 0x200000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8200000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0x8000000001L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000080000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x41004000020000L, active1, 0x6008280000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x800000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xf0000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000004400000L, active1, 0x1080006400000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x18000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0x800000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0xc02000010000L, active1, 0x18000000400L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x20001000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(3, 55);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x21800L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x410000800000000L, active1, 0x1000000L);
      case 78:
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 8);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(3, 63);
         return jjMoveStringLiteralDfa4_0(active0, 0x3002000100a00000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000080000L, active1, 0x1L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 8);
         return jjMoveStringLiteralDfa4_0(active0, 0x43000202c2000000L, active1, 0x200200006000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0x100000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x4018001000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8200000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xf0000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x41002808c2000000L, active1, 0x200000000001L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4800000L, active1, 0x1000000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000100400000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x438001018180000L, active1, 0x900000007800L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x204060201020000L, active1, 0x20000800000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000400000000L, active1, 0x6000080000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x18000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000010000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000L);
      case 82:
      case 114:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 107, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0x40000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000400000200000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(4, 37);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 97, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0x6500000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 8);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8200000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000000000L, active1, 0x6000001800L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20006000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xc0000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x20001008000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0x10000000L);
      case 69:
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 8);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0x800800400000000L, active1, 0x100000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2002008900440000L, active1, 0x18006400000L);
      case 76:
      case 108:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 8);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 8);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0x8040000000000L, active1, 0x1L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x4010005000000L, active1, 0x20000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 8);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 111, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000010000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(5, 19);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 8);
         else if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x9000000L);
      case 84:
      case 116:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 112, 8);
         return jjMoveStringLiteralDfa6_0(active0, 0x51014800c0a00000L, active1, 0x200000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000200000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0x8000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(6, 39);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0x4000000000L);
      case 68:
      case 100:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(6, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x200400212000000L, active1, 0xc0000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000L);
      case 71:
      case 103:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(6, 42);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x41112800c0800000L, active1, 0x200000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000L);
      case 77:
      case 109:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 8);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x6400000L);
      case 78:
      case 110:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(6, 35);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 108, 8);
         return jjMoveStringLiteralDfa7_0(active0, 0x2004100004000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800800000040000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(6, 41);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x6001L);
      case 84:
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(6, 27);
         return jjMoveStringLiteralDfa7_0(active0, 0x2a001100000000L, active1, 0x2001000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0x10000800L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x18000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa8_0(active0, 0x24000000000000L, active1, 0x1000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000400000L, active1, 0x20000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x10100000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x200000004000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 77, 8);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 78, 8);
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 103, 8);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 104, 8);
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000040000L, active1, 0x6000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L, active1, 0x40000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x402000100000000L, active1, 0x2000000001L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x400010200000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000080800000L, active1, 0x204000001000L);
      case 80:
      case 112:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 75, 8);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000L);
      case 83:
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(7, 36);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(7, 51);
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x40200002000000L, active1, 0xa0000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x100080040000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa9_0(active0, 0x210000000000000L, active1, 0x6000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000010000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x100080042000000L, active1, 0x20000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x1041000004000000L, active1, 0x18000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000L, active1, 0x2000000000L);
      case 78:
      case 110:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 109, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0x4c00000000800000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000100000000L, active1, 0x41000001L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0x4000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x500000600000L, active1, 0x20000000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80001000L);
      case 89:
      case 121:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(8, 45);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa10_0(active0, 0x6100080040000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(9, 28, 8);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 101, 8);
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000440000L, active1, 0x20080000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x400500000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x60800000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(9, 64);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(9, 76, 8);
         return jjMoveStringLiteralDfa10_0(active0, 0x1002000000000000L, active1, 0x11000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 93, 8);
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000L, active1, 0x40000000L);
      case 83:
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(9, 21);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(9, 23);
         break;
      case 84:
      case 116:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 102, 8);
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L, active1, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x102400040000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x1000000L);
      case 68:
      case 100:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 105, 8);
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(10, 94, 8);
         return jjMoveStringLiteralDfa11_0(active0, 0x2800000000000000L, active1, 0x84000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000L);
      case 71:
      case 103:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(10, 92, 8);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x4040000004000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(10, 22);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(10, 25);
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x1400000000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000040000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(11, 88, 8);
         return jjMoveStringLiteralDfa12_0(active0, 0x220100000000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000000L, active1, 0x4000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000000L, active1, 0x8000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x2400000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(11, 95, 8);
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(11, 59);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(11, 60);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x44000000040000L, active1, 0x2000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa13_0(active0, 0x2500000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x4010080000000000L, active1, 0x2000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(12, 26);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(12, 91, 8);
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(12, 18);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(12, 50);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000040000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x2042800000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x300000040000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x500000000000L, active1, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(13, 89, 8);
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000L, active1, 0x4000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x2200800000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(14, 90, 8);
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x100080040000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x500000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(14, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(14, 54);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x4200000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x500000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000000000L);
      case 78:
      case 110:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 15;
         }
         return jjMoveStringLiteralDfa16_0(active0, 0x100080000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000000L);
      case 83:
      case 115:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(15, 52);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0x500000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000000L);
      case 83:
      case 115:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(16, 56);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(16, 61);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x200000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000080000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x500000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0x800000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa19_0(active0, 0x500000000000L);
      case 83:
      case 115:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(18, 57);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x4002080000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa20_0(active0, 0x500000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x4001080000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa20_0(active0, 0x400000000000000L);
      case 83:
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(19, 49);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa21_0(active0, 0x400000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x4000000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0xd00000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0x80000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa21_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0x1000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa22_0(active0, 0x400000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa22_0(active0, 0x80000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0x800000000000L);
      case 83:
      case 115:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(21, 62);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa22_0(active0, 0x500000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa23_0(active0, 0x500000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa23_0(active0, 0x800000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa23_0(active0, 0x1000000000000L);
      case 83:
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(22, 43);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(22, 58);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa24_0(active0, 0x1000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa24_0(active0, 0x500000000000L);
      case 83:
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(23, 47);
         break;
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa25_0(active0, 0x500000000000L);
      case 83:
      case 115:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(24, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(23, active0, 0L);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(25, 44);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(25, 46);
         break;
      default :
         break;
   }
   return jjStartNfa_0(24, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     { jjCheckNAddTwoStates(9, 10); }
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  else if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 6:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 10:
                  if (curChar != 46)
                     break;
                  if (kind > 115)
                     kind = 115;
                  { jjCheckNAdd(11); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  { jjCheckNAdd(11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 8:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  { jjCheckNAdd(8); }
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 5:
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  { jjCheckNAdd(6); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 7)
                     kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x800L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\50", "\51", "\100", null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\76", "\74", 
"\76\75", "\74\75", "\75", "\52", "\57", "\53", "\55", null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                         input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

    /** Constructor. */
    public LexerTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public LexerTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
	
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 12; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit( SimpleCharStream stream, int lexState)
  {
  
    ReInit( stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 1, 2, 3, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffe001L, 0xfffffffffffffL, 
};
static final long[] jjtoSkip = {
   0xe1eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xe00L, 0x0L, 
};
static final long[] jjtoMore = {
   0x11e0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[12];
    private final int[] jjstateSet = new int[2 * 12];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected int curChar;
}
